{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","stateInicial","cita","mascota","propietario","fecha","hora","sintomas","error","NuevaCita","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","ListaCitas","citas","mensaje","Object","keys","length","map","key","App","datos","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da515b38.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({titulo}) => (\r\n    <header>\r\n        <h1 className=\"text-center\">{titulo}</h1>\r\n    </header>\r\n)\r\n \r\nexport default Header;","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nconst stateInicial = {\r\n    cita:{\r\n        mascota :'',\r\n        propietario : '',\r\n        fecha : '',\r\n        hora : '',\r\n        sintomas : ''\r\n\r\n    },\r\n    error: false\r\n}\r\nclass NuevaCita extends Component {\r\n    state = { ...stateInicial}\r\n\r\n     handleChange = e => {\r\n         this.setState({\r\n             cita : {\r\n                 ...this.state.cita,\r\n                 [e.target.name] : e.target.value\r\n             }\r\n         })\r\n     }\r\n     //cuando el usuario envía el formulario//\r\n     handleSubmit =e => {\r\n         e.preventDefault();\r\n\r\n         //extraer valores del state\r\n         const {mascota, propietario, fecha, hora, sintomas} = this.state.cita;\r\n\r\n         //validar que todos los valores esten llenos\r\n         if(mascota ===\"\" || propietario===\"\" || fecha ===\"\" || hora ===\"\" || sintomas=== \"\"){\r\n            this.setState({\r\n                error:true\r\n            });\r\n            return;\r\n         }\r\n         //generar objetos ocn los datos\r\n         const nuevaCita = { ...this.state.cita};\r\n         nuevaCita.id = uuid()\r\n         //Agregar la cita del estate en App\r\n         this.props.crearNuevaCita(nuevaCita)\r\n         //colocar en el state el stateInicial\r\n         this.setState({...stateInicial})\r\n        }\r\n    render() { \r\n       // extraer valor del state\r\n       const {error} = this.state;\r\n\r\n        return ( \r\n           <div className=\"card mt-5 py-5\">\r\n               <div className=\"card-body\">\r\n                <h2 className=\"card-tittle text-center mb-5\">\r\n                  Llena el formulario para crear una cita\r\n                </h2>\r\n\r\n                {error ? <div className=\"alert alert-danger mt-2 mb-5 text-center\">Todos los campos son obligatorios </div> : null}\r\n                 <form\r\n                 onSubmit={this.handleSubmit}\r\n                 >\r\n                     <div className=\"form-group row\">\r\n                         <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre de la Mascota</label>\r\n                     <div className=\"col-sm-8 col-lg-10\">\r\n                         <input\r\n                         type=\"text\"\r\n                         className=\"form-control\"\r\n                         placeholder=\"Nombre de la Mascota\"\r\n                         name=\"mascota\"\r\n                         onChange={this.handleChange}\r\n                         value={this.state.cita.mascota}\r\n                          />\r\n                     </div>\r\n                     </div>\r\n                     <div className=\"form-group row\">\r\n                         <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre del dueño</label>\r\n                     <div className=\"col-sm-8 col-lg-10\">\r\n                         <input\r\n                         type=\"text\"\r\n                         className=\"form-control\"\r\n                         placeholder=\"Nombre del dueño\"\r\n                         name=\"propietario\"\r\n                         onChange={this.handleChange}\r\n                         value={this.state.cita.propietario}\r\n                          />\r\n                     </div>\r\n                     </div>\r\n                     <div className=\"form-group row\">\r\n                         <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\r\n                     <div className=\"col-sm-8 col-lg-4\">\r\n                         <input\r\n                         type=\"date\"\r\n                         className=\"form-control\"\r\n                         name=\"fecha\"\r\n                         onChange={this.handleChange}\r\n                         value={this.state.cita.fecha}\r\n                          />\r\n                     </div>\r\n                         <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\r\n                     <div className=\"col-sm-8 col-lg-4\">\r\n                         <input\r\n                         type=\"time\"\r\n                         className=\"form-control\"\r\n                         name=\"hora\"\r\n                         onChange={this.handleChange}\r\n                         value={this.state.cita.hora}\r\n                          />\r\n                     </div>\r\n                     </div>\r\n                     <div className=\"form-group row\">\r\n                         <label className=\"col-sm-4 col-lg-2 col-form-label\">Síntomas</label>\r\n                     <div className=\"col-sm-8 col-lg-10\">\r\n                         <textarea\r\n                         className=\"form-control\"\r\n                         placeholder=\"Describe los sintomas\"\r\n                         name=\"sintomas\"\r\n                         onChange={this.handleChange}\r\n                         value={this.state.cita.sintomas}\r\n                         ></textarea>\r\n                     </div>\r\n                     </div>\r\n                     <input type=\"submit\" className=\"py-3 mt-2 btn btn-success btn-block\" value=\"Agregar nueva cita\"/>\r\n                </form>  \r\n               </div>\r\n           </div> \r\n         );\r\n    }\r\n}\r\n NuevaCita.propTypes = {\r\n     crearNuevaCita : PropTypes.func.isRequired\r\n }\r\nexport default NuevaCita;\r\n","import React from 'react';\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"media mt-3\">\r\n     <div className=\"media-body\">\r\n       <h3 className=\"mt-0\">{cita.mascota}</h3>\r\n       <p className=\"card-text\"><span>Nombre Dueño</span>{cita.propietario}</p>\r\n       <p className=\"card-text\"><span>Fecha</span>{cita.fecha}</p>\r\n       <p className=\"card-text\"><span>Hora</span>{cita.hora}</p>\r\n       <p className=\"card-text\"><span>Síntomas</span>{cita.sintomas}</p>\r\n\r\n    <button className=\"btn btn-danger\" onClick={()=>eliminarCita(cita.id)}>Borrar &times;</button> \r\n\r\n     </div>\r\n    </div>\r\n)\r\nexport default Cita;","import React from 'react';\r\nimport Cita from './Cita'\r\nconst ListaCitas = ({citas, eliminarCita}) => {\r\n    const mensaje = Object.keys(citas).length === 0 ? \"No hay citas\" : \"Administra tus citas\"\r\n    return (\r\n        <div className=\"card mt-2 py-5\">\r\n            <div className=\"card-body\">\r\n              <h2 className=\"caard-tittle text-center\">{mensaje}</h2>\r\n             <div className=\"lista-citas\">\r\n                 {citas.map(cita => (\r\n                 <Cita \r\n                 key={cita.id}\r\n                 cita={cita}\r\n                 eliminarCita={eliminarCita}\r\n                 />\r\n                 ))}\r\n             </div>\r\n            </div>\r\n        </div>\r\n            )\r\n}\r\n  \r\nexport default ListaCitas;","import React, {Component} from 'react';\nimport './bootstrap.min.css';\nimport Header from './components/Header'\nimport NuevaCita from './components/NuevaCita'\nimport ListaCitas from './components/ListaCitas'\n\nclass App extends Component {\n  state = {  \n    citas: []\n  }\n//cuando la aplicacion carga\n  componentDidMount(){\n   const citasLS = localStorage.getItem('citas');\n   if(citasLS){\n    this.setState({\n      citas : JSON.parse(citasLS)\n    }) \n   }\n  }\n\n  // cuando eliminamos o agregamos una nueva cita\n  componentDidUpdate(){\n    localStorage.setItem('citas', JSON.stringify(this.state.citas))\n  }\n  crearNuevaCita = datos =>{\n    //copiar el state actual\n    const citas = [...this.state.citas, datos]\n    //agregar el nuevo state\n    this.setState({\n      citas\n    })\n  }\n  //elimina las citas del state\n  eliminarCita = id =>{\n    //TOMA UNA COPIA DEL STATE\n    const citasActuales = [...this.state.citas]\n   //utilizar filter para sacar le elemento @id del arreglo\n   const citas = citasActuales.filter(cita => cita.id !== id)\n  this.setState({\n    citas\n  })\n  }\n  render() { \n    return ( \n     <div className=\"container\">\n      <Header titulo='Administrador Pacientes Veterinaria'/>\n     <div className=\"row\">\n       <div className=\"col-md-10 mx-auto\">\n         <NuevaCita  crearNuevaCita={this.crearNuevaCita}/>\n       </div>\n      <div className=\"mt-5 col-md-10 mx-auto \" >\n        <ListaCitas\n        citas={this.state.citas}\n        eliminarCita={this.eliminarCita}\n        />\n      </div>\n     </div>\n     \n     </div>\n     );\n  }\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}